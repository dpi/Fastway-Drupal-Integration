<?php

define('FASTWAY_PREF_PRICE_HIGHESTPRICE', 0);
define('FASTWAY_PREF_PRICE_LOWESTPRICE', 1);
define('FASTWAY_PREF_PRICE_DEFAULT', FASTWAY_PREF_PRICE_HIGHESTPRICE);


/**
 * Drupal Integration
 * ====================
 */

/**
 * 
 * Retrieves a quote from Fastway
 * 
 * Example of valid XML quote request:
 * http://www.fastway.com.au/Magic94scripts/mgrqispi94.dll?APPNAME=FW&PRGNAME=FastLocatorRecord&ARGUMENTS=-A1,-AADL,-AVictor%20harbor,-A5211,-A20,-N1
 * 
 * @param int $country_code Fastway internal country code
 * @param string $origin_shortcode Fastway internal origin city code
 * @param string $destination_fulltext Full text of destination city
 * @param int $destination_pcode standard Australian postcode
 * @param int $weight weight, in kilos
 */
function fastway_api_quote($country_code, $origin_shortcode, $destination_fulltext, $destination_pcode, $weight) {
  $maxweight = 25; // fastway only allows maximum weight of 25 kilos
  
  $base = "www.fastway.com.au";
  $script = "Magic94scripts/mgrqispi94.dll";
  $base_get = "APPNAME=FW&PRGNAME=FastLocatorRecord";
  $arguments = "";
  
  $destination_fulltext = drupal_urlencode($destination_fulltext);
  
  if (($weight = ceil($weight)) > $maxweight) { drupal_set_message(t('Fastway does not permit sending packages over @maxweight kilos.', array('@maxweight' => $maxweight)), 'warning'); return false; }
  if (empty($origin_shortcode)) { drupal_set_message(t('Origin not set correctly.')); return false; }
  if (empty($destination_fulltext) || empty($destination_pcode)) { /*drupal_set_message(t('Destination is invalid.'));*/ return false; }
    
  $arguments = '-A' . $country_code . ',-A' . $origin_shortcode . ',-A' . $destination_fulltext . ',-A' . $destination_pcode . ',-A' . $weight . ',-N1';
  
  $url = 'http://' . $base . '/' . $script . '?' . $base_get . '&ARGUMENTS=' . $arguments;
  
  $headers = array('User-Agent' => 'Drupal Ubercart Fastway Module');
  
  watchdog('uc_fastway', t('Made an API request to Fastway: @url' , array('@url' => $url)));
  $request = drupal_http_request($url, $headers);
  
  // try to load response into xml object
  // Fastway is a bad web citizen, and does not make use of HTTP codes. Always returns code 200.
  // We need to disable php error reporting for this block.
  // http://php.net/manual/en/function.simplexml-load-string.php
  // Because the error reporting is so bad, we should expect a malformed response. (not even XML!)
  
  libxml_use_internal_errors(true);
  if (!($response = simplexml_load_string($request->data))) {
    // xml parsing error:
    watchdog('uc_fastway', t('Fastway received a malformed response from Fastway API. This is probably normal.'));
    //drupal_set_message('Fastway could not get a response for you. Please check your address is correct, and is using correct spelling.','warning');
    return false;
  }
  libxml_use_internal_errors(false);
  
  // to and from
  $waypoints = explode('to', (string)$response->fromto);
  foreach($waypoints as $k => $waypoint) {
    $waypoints[$k] = trim($waypoint);
  }
  
  // destination info
  $destination = array(
    'city' => (string)$response->destination->dest,
    'state' => (string)$response->destination->state,
    'postcode' => (string)$response->destination->postcode,
    'franchise' => (string)$response->destination->delfranchise,
    'timeframe' => t('@timeframe days', array('@timeframe' => (string)$response->destination->deltime)),
  );
  
  // services
  // loop through services defined by fastway to find each label.
  $fastway_labels = array();
  
  foreach ($response->service as $service) {
    $pricerange = explode('to', $service->price);
    foreach($pricerange as $key => $price) {
      // filter random dollar signs and whitespace actual floats
      preg_match_all('/[0-9]+\.[0-9]{2}/i', $price, $matches);
      if (isset($matches[0][0])) { $pricerange[$key] = $matches[0][0]; }
    }
    
    $saverlabelpricerange = false;
    if ((string)$service->totalprice != 'N/A') {
      $saverlabelpricerange = explode('-', (string)$service->totalprice);
      foreach($saverlabelpricerange as $key => $price) {
        // filter random dollar signs and whitespace actual floats
        preg_match_all('/[0-9]+\.[0-9]{2}/i', $price, $matches);
        if (isset($matches[0][0])) { $saverlabelpricerange[$key] = $matches[0][0]; }
      }
    }
    
    $saverlabelsqty = false;
    if (is_numeric((string)$service->numsaverlabels)) {
      $saverlabelsqty = (int)$service->numsaverlabels;
    }
    
    $servicetype = strtolower((string)$service->serv);
    $labels = (string)$service->labelcolour;
    $labelcolours = array(); // labels applicable
    
    // fix the problem where colour is only added to the last satchel type
    // add it to each label type
    // i.e: A2/A3 BLUE = array('BLUE A2','BLUE A3')
    if (strrpos($labels, ' ')) {
      $colour = trim(strrchr($labels, ' '));
      $labels = explode('/', substr($labels, 0, strpos($labels, ' ')));
      foreach ($labels as $labelsize) {
        $labelcolours[$labelsize] = $colour . ' ' . $labelsize;
      }
    } else {
      $labelcolours = explode('/', $labels);
    }
    
    $labelweightlimit = (float)$service->weightlimit;
    
    // until we can find the prices of labels in between the two prices provided by fastway,
    // ie: fastway does not tell you which label is lowest price etc.
    // we will set all labels to highest price to be safe.
    $maxprice = 0;
    foreach ($pricerange as $price) {
      if ($price > $maxprice) { $maxprice = $price; }
    }
    
    foreach ($labelcolours as $size => $labelcolour) {
      // No excess weight labels required:
      if ($saverlabelsqty) {
        // pick the highest price saver cost until we can figure out how the lower prices work
        // as above.
        $maxsaverprice = 0;
        foreach ($saverlabelpricerange as $price) {
          if ($price > $maxsaverprice) { $maxsaverprice = $price; }
        }
        
        $fastway_labels[] = array(
          'type' => $servicetype,
          'name' => $labelcolour,
        	'size' => is_numeric($size) ? NULL : $size, 
          'notes' => t('@labelcolour colour label with @numsavers saver labels. Total cost of saver labels is @savertotal', array('@labelcolour' => $labelcolour, '@numsavers' => $saverlabelsqty, '@savertotal' => $maxsaverprice)),
          'price' => ($maxprice + $maxsaverprice),
        );
        
      } else if (!$saverlabelsqty && $weight < $labelweightlimit) {
        $fastway_labels[] = array(
          'type' => $servicetype,
          'name' => $labelcolour,
        	'size' => is_numeric($size) ? NULL : $size, 
          'price' => $maxprice,
          'notes' => '',
        );
      }
    }
  }
  
  return array(
    'locations' => $waypoints,
    'destination' => $destination,
    'labels' => $fastway_labels,
  );
}

/**
 * Sends a dummy quote request to Fastway to test whether a origin code exists.
 * 
 * @param string $origin_code
 */
function fastway_api_check_origin($origin_code) {
	// We're going to pretend to send a package to Sydney. A place that is known to exist. I think.
	
	$origin_code = (string)$origin_code;
	if (!fastway_api_quote(1, $origin_code, 'Sydney', 2000, 1)) {
		return false;
	}
	
	return true;
}
