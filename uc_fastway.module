<?php
/**
 * 
 * @author Daniel Phin
 * @file Provides Fastway integration with Ubercart
 */

/**
 * Ubercart Integration
 * ====================
 */

/**
 * Implementation of hook_ca_predicate
 * 
 * @link http://www.ubercart.org/docs/api/hook_ca_predicate
 * @link http://www.ubercart.org/docs/developer/9034/conditional_actions
 */
function uc_fastway_ca_predicate() {
  $enabled = variable_get('uc_quote_enabled', array());

  $predicates = array(
    'uc_fastway_get_quote_package' => array(//uc_fastway_get_quote
      '#title' => t('Shipping quote from Fastway'),
      '#trigger' => 'get_quote_from_fastway', // this trigger is created in shipping/uc_quote.module under function uc_quote_ca_trigger()
      '#class' => 'uc_fastway',
      '#status' => $enabled['fastway'],
      '#actions' => array(
        array(
          '#name' => 'uc_quote_action_get_quote', // our method defined in uc_fastway_shipping_method is called in shipping/uc_quote.module 
          // function uc_quote_action_get_quote() see line containing: $quote_data = call_user_func(
          '#title' => t('Fetch a shipping quote'),
          '#argument_map' => array(
            'order' => 'order',
            'method' => 'method',
          ),
        ),
      ),
      'weight' => $weight['fastway'],
    ),
    'uc_fastway_get_quote_a3' => array(
      '#title' => t('Shipping quote for Fastway A3 Sachel'),
      '#trigger' => 'get_quote_from_fastway_satchel_a3', // this trigger is created in shipping/uc_quote.module under function uc_quote_ca_trigger()
      '#class' => 'uc_fastway',
      '#status' => $enabled['fastway_satchel_a3'],
      '#actions' => array(
        array(
          '#name' => 'uc_quote_action_get_quote', // our method defined in uc_fastway_shipping_method is called in shipping/uc_quote.module 
          '#title' => t('Fetch a shipping quote'),
          '#argument_map' => array(
            'order' => 'order',
            'method' => 'method',
          ),
        ),
      ),
      'weight' => $weight['fastway_satchel_a3'],
    ),
  );

  return $predicates;
}


/**
 * Implementation of hook_shipping_method
 * 
 * @link http://api.ubercart.org/api/function/hook_shipping_method
 */

function uc_fastway_shipping_method() {
  $methods = array();
  
  $enabled = variable_get('uc_quote_enabled', array());
  $weight = variable_get('uc_quote_method_weight', array());
  
  $methods['fastway'] = array(
    'id' => 'fastway',
    'title' => t('Fastway'),
    'enabled' => $enabled['fastway'],
    'weight' => $weight['fastway'],
    'quote' => array(
      'type' => 'order',// 'type' => 'fastway_package',
      'callback' => 'uc_fastway_quote_package',
    ),
  );
  
  $methods['fastway_satchel_a3'] = array(
    'id' => 'fastway_satchel_a3',
    'title' => t('Fastway A3 Satchel'),
    'enabled' => $enabled['fastway_satchel_a3'],
    'weight' => $weight['fastway_satchel_a3'],
    'quote' => array(
      'type' => 'satchel_a3',
      'callback' => 'uc_fastway_quote_a3', 
    ),
  );
  
  return $methods;
}

function uc_fastway_shipping_type() {
  $types = array();
  
  $types['fastway_package'] = array(
    'id' => 'fastway_package',
    'title' => t('Fastway Package'),
    'weight' => 1,
  );
  
  $types['satchel_a3'] = array(
    'id' => 'satchel_a3',
    'title' => t('A3 Satchel'),
    'weight' => 2,
  );
  
  // A2 SATCHEL

  return $types;
}


/**
 * Quote Callback for Fastway Packages
 * 
 * Called in uc_quote.module by function uc_quote_action_get_quote()
 * Line containing: if (function_exists($method['quote']['callback'])) {
 * 
 * @link http://api.ubercart.org/api/function/hook_shipping_method
 * @param array $products
 * @param array $details
 * @param array $method
 */
function uc_fastway_quote_package($products, $details, $method) {
  $quotes = array();
  $context = array(
    'revision' => 'altered',
    // 'type' => 'amount',
  );  
  
  $combined_weight = 0;
  foreach ($products as $product) {
    $combined_weight += ($product->qty * ($product->weight * uc_weight_conversion($product->weight_units, 'kg')));
  }
  
  $quotations = uc_fastway_request_quote(1, 'ADL', $details['city'], $details['postal_code'], $combined_weight);
  if (!$quotations) { return $quotes; }
  
  foreach($quotations['labels'] as $label) {
    $quotes[] = array(
      'rate' => $label['price'], //uc_price('26.04',$context),
      'format' => $label['price'], //uc_price('26.03', $context),
      'option_label' => t('Fastway') . ' ' . $label['name'],
     );
  }
  
  return $quotes;
}

/**
 * Quote Callback for Fastway A3 Satchels
 * 
 * @param array $products
 * @param array $details
 * @param array $method
 */
function uc_fastway_quote_a3($products, $details, $method) {
  $quotes = array();
  
  $context = array(
    'revision' => 'altered',
  );
  
  $combined_weight = 0;
  foreach ($products as $product) {
    $combined_weight += ($product->qty * ($product->weight * uc_weight_conversion($product->weight_units, 'kg')));
  }
  
  if (!$quotations = uc_fastway_request_quote(1, 'ADL', $details['city'], $details['postal_code'], $combined_weight)) { return $quotes; }
  
  //stuff
  
  return $quotes;
}



/**
 * Drupal Integration
 * ====================
 */

/**
 * 
 * Retrieves a quote from Fastway
 * 
 * Example of valid XML quote request:
 * http://www.fastway.com.au/Magic94scripts/mgrqispi94.dll?APPNAME=FW&PRGNAME=FastLocatorRecord&ARGUMENTS=-A1,-AADL,-AVictor%20harbor,-A5211,-A20,-N1
 * 
 * @param int $country_code Fastway internal country code
 * @param string $origin_shortcode Fastway internal origin city code
 * @param string $destination_fulltext Full text of destination city
 * @param int $destination_pcode standard Australian postcode
 * @param int $weight weight, in kilos
 */
function uc_fastway_request_quote($country_code, $origin_shortcode, $destination_fulltext, $destination_pcode, $weight) {
  $maxweight = 25; // fastway only allows maximum weight of 25 kilos
  
  $base = "www.fastway.com.au";
  $script = "Magic94scripts/mgrqispi94.dll";
  $base_get = "APPNAME=FW&PRGNAME=FastLocatorRecord";
  $arguments = "";
  
  $destination_fulltext = drupal_urlencode($destination_fulltext);
  
  if (($weight = ceil($weight)) > $maxweight) { drupal_set_message(t('Fastway does not permit sending packages over @maxweight kilos.', array('@maxweight' => $maxweight)), 'warning'); return false; }
  if (empty($origin_shortcode)) { drupal_set_message(t('Origin not set correctly.')); return false; }
  if (empty($destination_fulltext) || empty($destination_pcode)) { drupal_set_message(t('Destination is invalid.')); return false; }
    
  $arguments = '-A' . $country_code . ',-A' . $origin_shortcode . ',-A' . $destination_fulltext . ',-A' . $destination_pcode . ',-A' . $weight . ',-N1';
  
  $url = 'http://' . $base . '/' . $script . '?' . $base_get . '&ARGUMENTS=' . $arguments;
  
  $headers = array('User-Agent' => 'Drupal Ubercart Fastway Module');
  
  watchdog('uc_fastway', t('Made an API request to Fastway: @url' , array('@url' => $url)));
  $request = drupal_http_request($url, $headers);
  
  // try to load response into xml object
  // Fastway is a bad web citizen, and does not make use of HTTP codes. Always returns code 200.
  // We need to disable php error reporting for this block.
  // http://php.net/manual/en/function.simplexml-load-string.php
  // Because the error reporting is so bad, we should expect a malformed response. (not even XML!)
  
  libxml_use_internal_errors(true);
  if (!($response = simplexml_load_string($request->data))) {
    // xml parsing error:
    watchdog('uc_fastway', t('Fastway received a malformed response from Fastway. This is probably normal.'));
    drupal_set_message('Fastway could not get a response for you. Please check your address is correct, and is using correct spelling.','warning');
    return false;
  }
  libxml_use_internal_errors(false);
  
  // to and from
  $waypoints = explode('to', (string)$response->fromto);
  foreach($waypoints as $k => $waypoint) {
    $waypoints[$k] = trim($waypoint);
  }
  
  // destination info
  $destination = array(
    'city' => (string)$response->destination->dest,
    'state' => (string)$response->destination->state,
    'postcode' => (string)$response->destination->postcode,
    'franchise' => (string)$response->destination->delfranchise,
    'timeframe' => t('@timeframe days', array('@timeframe' => (string)$response->destination->deltime)),
  );
  
  // services
  // loop through services defined by fastway to find each label.
  $fastway_labels = array();
  
  foreach ($response->service as $service) {
    $pricerange = explode('to', $service->price);
    foreach($pricerange as $key => $price) {
      // filter random dollar signs and whitespace actual floats
      preg_match_all('/[0-9]+\.[0-9]{2}/i', $price, $matches);
      if (isset($matches[0][0])) { $pricerange[$key] = $matches[0][0]; }
    }
    
    $saverlabelpricerange = false;
    if ((string)$service->totalprice != 'N/A') {
      $saverlabelpricerange = explode('-', (string)$service->totalprice);
      foreach($saverlabelpricerange as $key => $price) {
        // filter random dollar signs and whitespace actual floats
        preg_match_all('/[0-9]+\.[0-9]{2}/i', $price, $matches);
        if (isset($matches[0][0])) { $saverlabelpricerange[$key] = $matches[0][0]; }
      }
    }
    
    $saverlabelsqty = false;
    if (is_numeric((string)$service->numsaverlabels)) {
      $saverlabelsqty = (int)$service->numsaverlabels;
    }
    
    $servicetype = strtolower((string)$service->serv);
    $labels = (string)$service->labelcolour;
    $labelcolours = array(); // labels applicable
    
    // fix the problem where colour is only added to the last satchel type
    // add it to each label type
    // i.e: A2/A3 BLUE = array('BLUE A2','BLUE A3')
    if (strrpos($labels, ' ')) {
      $colour = trim(strrchr($labels, ' '));
      $labels = substr($labels, 0, strpos($labels, ' '));
      $labelcolours = explode('/', $labels);
      foreach ($labelcolours as $k => $v) {
        $labelcolours[$k] = $colour . ' ' . $v;
      }
    } else {
      $labelcolours = explode('/', $labels);
    }
    
    $labelweightlimit = (float)$service->weightlimit;
    
    // until we can find the prices of labels in between the two prices provided by fastway,
    // ie: fastway does not tell you which label is lowest price etc.
    // we will set all labels to highest price to be safe.
    $maxprice = 0;
    foreach ($pricerange as $price) {
      if ($price > $maxprice) { $maxprice = $price; }
    }
    
    foreach ($labelcolours as $k => $labelcolour) {
      // No excess weight labels required:
      if ($saverlabelsqty) {
        // pick the highest price saver cost until we can figure out how the lower prices work
        // as above.
        $maxsaverprice = 0;
        foreach ($saverlabelpricerange as $price) {
          if ($price > $maxsaverprice) { $maxsaverprice = $price; }
        }
        
        $fastway_labels[] = array(
          'type' => $servicetype,
          'name' => $labelcolour,
          'notes' => t('@labelcolour colour label with @numsavers saver labels. Total cost of saver labels is @savertotal', array('@labelcolour' => $labelcolour, '@numsavers' => $saverlabelsqty, '@savertotal' => $maxsaverprice)),
          'price' => ($maxprice + $maxsaverprice),
        );
        
      } else if (!$saverlabelsqty && $weight < $labelweightlimit) {
        $fastway_labels[] = array(
          'type' => $servicetype,
          'name' => $labelcolour,
          'price' => $maxprice,
          'notes' => '',
        );
      }
    }
    
    continue;
    
    
    
    /*
    // is the total weight within an allowable amount?
    if ($weight < (float)$service->weightlimit) {
      // NOTE: need to add the excess weight labels
      $services[] = array(
        'type' => (string)$service->serv,!
        'labels' => 1,
        'pricerange' => $pricerange,
        'weightlimit' => (string)$service->weightlimit,
        'numsaverlabels' => $numoflabels,
        'totalprice' => $saverpricerange,
      );
    } else if (is_numeric($service->numsaverlabels)) {
      // fastway allows you to add additional 5KG stickers if more than allowed base amount
      // numsaverlabels will be set to N/A if not allowed (as in satchels)
      
      
      
    }*/
    
    
  }
  
  return array(
    'locations' => $waypoints,
    'destination' => $destination,
    'labels' => $fastway_labels,
  );
}
